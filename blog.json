[
  {
    "picture": "https://i.ibb.co/0VTKzjq/SQL-Vs-No-SQL1.png",
    "name": "Ruiz Curry",
    "date": "2022-09-25",
    "title": "Difference between SQL and NoSQL",
    "about": "The choice between a relational (SQL) and non-relational (NoSQL) data structure is one of the most important considerations to make when selecting a database. When deciding between the two databases, the developers need to bear in mind that there are significant distinctions between them, despite the fact that both databases provide feasible possibilities.\r\n The Main Differences: \n Type – SQL databases are primarily called as Relational Databases (RDBMS); whereas NoSQL database are primarily called as non-relational or distributed database. \n Language – SQL databases defines and manipulates data based structured query language (SQL). SQL requires predefined schemas to determine the structure of the data before executing work. Also all of data must follow the same structure. A NoSQL database has dynamic schema for unstructured data. Data is stored in many ways which means it can be document-oriented, column-oriented, graph-based or organized as a KeyValue store. This flexibility means that documents can be created without having defined structure first. Also each document can have its own unique structure. The syntax varies from database to database, and you can add fields as you go. \n Scalability – In almost all situations SQL databases are vertically scalable. But on the other hand NoSQL databases are horizontally scalable. \n Structure – SQL databases are table-based on the other hand NoSQL databases are either key-value pairs, document-based, graph databases or wide-column stores. This makes relational SQL databases a better option for applications that require multi-row transactions such as an accounting system or for legacy systems that were built for a relational structure. \n Property followed – SQL databases follow ACID properties (Atomicity, Consistency, Isolation and Durability) whereas the NoSQL database follows the Brewers CAP theorem (Consistency, Availability and Partition tolerance). \r\n"
  },
  {
    "picture": "https://i.ibb.co/hCbKnXv/JWT-jpg-width-1999-name-JWT.jpg",
    "name": "Marcus Ramirez",
    "date": "2022-08-25",
    "title": "What is JWT, and how does it work?",
    "about": "JWT or JSON Web Token, is an open standard used to share security information between two parties — a client and a server. Each JWT contains encoded JSON objects, including a set of claims. JWTs are signed using a cryptographic algorithm to ensure that the claims cannot be altered after the token is issued. /n How it works? /n A JWT is a string made up of three parts, separated by dots (.), and serialized using base64. In the most common serialization format, compact serialization, the JWT looks something like this: xxxxx.yyyyy.zzzzz. /n Once decoded, you will get two JSON strings: /n a) The header and the payload. /n b) The signature. /n The JOSE (JSON Object Signing and Encryption) header contains the type of token — JWT in this case — and the signing algorithm.  /n The payload contains the claims. This is displayed as a JSON string, usually containing no more than a dozen fields to keep the JWT compact. This information is typically used by the server to verify that the user has permission to perform the action they are requesting. /n There are no mandatory claims for a JWT, but overlaying standards may make claims mandatory. For example, when using JWT as bearer access token under OAuth2.0, iss, sub, aud, and exp must be present. some are more common than others.  /n The signature ensures that the token hasn’t been altered. The party that creates the JWT signs the header and payload with a secret that is known to both the issuer and receiver, or with a private key known only to the sender. When the token is used, the receiving party verifies that the header and payload match the signature. /r/n,"
  },
  {
    "picture": "https://i.ibb.co/GFXs2xc/javascript-vs-nodejs.png",
    "name": "Roberto Charlos",
    "date": "2022-07-25",
    "title": "What is the difference between javascript and NodeJS?",
    "about": "JavaScript is a lightweight, object-oriented scripting language that is used to build dynamic HTML pages with interactive effects on a webpage. On the other hand, Node.js usually represents a list of objects and methods accessible to JavaScript code when run in the V8 engine or via the node interpreter. \n Here, we are going to discuss the main differences between JavaScript and Node.js: \n a. JavaScript is a simple programming language that could be run in any browser that supports the JavaScript Engine. On the other hand, Node.js is a running environment or interpreter for the JavaScript programming language. It needs libraries that may be easily accessed from JavaScript programming to make it more useful. \n b. JavaScript can run on any engine, including Firefox's Spider Monkey, Safari's JavaScript Core, and V8 (Google Chrome). As a result, JavaScript programming is very simple to create, and any running environment is equivalent to a proper browser. On the other hand, Node.js only supports the V8 engine, which is exclusive to Google Chrome. \n c. A particular non-blocking task is needed to access any operating system. There are some basic objects in JavaScript, but they are all os-specific. For example, ActiveX Control is a Windows-only application. However, Node.js is granted the ability to run non-blocking tasks unique to the operating system from any JavaScript programming. \n d. For a single web application, JavaScript is typically used for any client-side operation. An operation may be dealing with business validation, dynamic page display at a set time interval, or a simple Ajax call. For any web application, these are used for a maximum amount of time. On the other hand, Node.js is generally used for non-blocking accessibility or execution of any operating system. On an operating system, a non-blocking operation involves generating or executing a shell script, retrieving unique hardware-related information in a single call, obtaining installed certificate details in the system, or performing a large number of specified tasks. \n e. JavaScript's main advantages include a wide range of interfaces and interactivity and just the right amount of server contact and direct input to visitors. On the other hand, Node.js has a node package manager with over 500 modules and the ability to handle concurrent requests. It also has the special capability of supporting micro-service architecture as well as IoT. \r\n,"
  },
  {
    "picture": "https://i.ibb.co/KwCNbMq/nodejs.png",
    "name": "Christiano Ronaldinho",
    "date": "2022-06-25",
    "title": "How does NodeJS handle multiple requests at the same time?",
    "about": "We know NodeJS application is single-threaded. Say, if processing involves request A that takes 10 seconds, it does not mean that a request which comes after this request needs to wait 10 seconds to start processing because NodeJS event loops are only single-threaded. The entire NodeJS architecture is not single-threaded. \n How NodeJS handle multiple client requests? \n NodeJS receives multiple client requests and places them into EventQueue. NodeJS is built with the concept of event-driven architecture. NodeJS has its own EventLoop which is an infinite loop that receives requests and processes them. EventLoop is the listener for the EventQueue. \n If NodeJS can process the request without I/O blocking then the event loop would itself process the request and sends the response back to the client by itself. But, it is possible to process multiple requests parallelly using the NodeJS cluster module or worker_threads module. \r\n"
  }
]
